#pragma once
/* This was generated by capra_micro_comm.
* DO NOT EDIT
*/

#include <capra_comm.h>


// --- STRUCTS ---
struct Void
{
    euint8_t pad0;
};
static_assert(sizeof(Void) == 1);

struct Bool_
{
    eboolean_t b;
};
static_assert(sizeof(Bool_) == 1);

struct Byte
{
    euint8_t b;
};
static_assert(sizeof(Byte) == 1);

struct Short
{
    eint16_t s;
};
static_assert(sizeof(Short) == 2);

struct UShort
{
    euint16_t s;
};
static_assert(sizeof(UShort) == 2);

struct Int
{
    eint32_t i;
};
static_assert(sizeof(Int) == 4);

struct UInt
{
    euint32_t i;
};
static_assert(sizeof(UInt) == 4);

struct Long
{
    eint64_t l;
};
static_assert(sizeof(Long) == 8);

struct ULong
{
    euint64_t l;
};
static_assert(sizeof(ULong) == 8);

struct Float
{
    efloat_t f;
};
static_assert(sizeof(Float) == 4);

struct Vector2D
{
    efloat_t x;
    efloat_t y;
};
static_assert(sizeof(Vector2D) == 8);

struct Status
{
    euint16_t statusCode;
};
static_assert(sizeof(Status) == 2);

struct RGB
{
    euint8_t r;
    euint8_t g;
    euint8_t b;
};
static_assert(sizeof(RGB) == 3);

struct LED
{
    euint16_t i;
    RGB c;
    euint8_t pad0;
};
static_assert(sizeof(LED) == 6);

struct Report
{
    Vector2D pos;
    Status status;
    euint8_t pad0;
    euint8_t pad1;
};
static_assert(sizeof(Report) == 12);

struct Bounds
{
    efloat_t lower;
    efloat_t upper;
};
static_assert(sizeof(Bounds) == 8);

struct PIDConfig
{
    efloat_t p;
    efloat_t i;
    efloat_t d;
    Bounds bounds;
};
static_assert(sizeof(PIDConfig) == 20);

struct Config
{
    PIDConfig horizPID;
    PIDConfig vertiPID;
};
static_assert(sizeof(Config) == 40);

// --- COMMANDS ---
Status ledOn(Void);
Status ledOff(Void);
Status setLedState(Bool_);
Byte loopback(Byte);
Bool_ patate(Status);


BaseFunction_ptr commands[] = {
    new Function<Status, Void>(&ledOn),
    new Function<Status, Void>(&ledOff),
    new Function<Status, Bool_>(&setLedState),
    new Function<Byte, Byte>(&loopback),
    new Function<Bool_, Status>(&patate),
};
#define COMMANDS_COUNT 5
#define MAX_DECODED_SIZE 41
#define MAX_ENCODED_SIZE 57
